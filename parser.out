Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    UNICODE_CONSTITUENT
    BOOLEAN
    SPECIAL_SUBSEQUENT
    CHARACTER_NAME
    SPECIAL_INITIAL

Grammar

Rule 0     S' -> inline_hex_escape
Rule 1     hex_digit -> DIGIT
Rule 2     hex_digit -> LETTER
Rule 3     hex_digit_plus -> hex_digit_plus hex_digit
Rule 4     hex_digit_plus -> hex_digit
Rule 5     hex_scalar_value -> hex_digit_plus
Rule 6     inline_hex_escape -> HEX_ESCAPE hex_scalar_value

Terminals, with rules where they appear

BOOLEAN              : 
CHARACTER_NAME       : 
DIGIT                : 1
HEX_ESCAPE           : 6
LETTER               : 2
SPECIAL_INITIAL      : 
SPECIAL_SUBSEQUENT   : 
UNICODE_CONSTITUENT  : 
error                : 

Nonterminals, with rules where they appear

hex_digit            : 3 4
hex_digit_plus       : 3 5
hex_scalar_value     : 6
inline_hex_escape    : 0

Parsing method: LALR

state 0

    (0) S' -> . inline_hex_escape
    (6) inline_hex_escape -> . HEX_ESCAPE hex_scalar_value

    HEX_ESCAPE      shift and go to state 2

    inline_hex_escape              shift and go to state 1

state 1

    (0) S' -> inline_hex_escape .



state 2

    (6) inline_hex_escape -> HEX_ESCAPE . hex_scalar_value
    (5) hex_scalar_value -> . hex_digit_plus
    (3) hex_digit_plus -> . hex_digit_plus hex_digit
    (4) hex_digit_plus -> . hex_digit
    (1) hex_digit -> . DIGIT
    (2) hex_digit -> . LETTER

    DIGIT           shift and go to state 5
    LETTER          shift and go to state 7

    hex_scalar_value               shift and go to state 6
    hex_digit                      shift and go to state 4
    hex_digit_plus                 shift and go to state 3

state 3

    (5) hex_scalar_value -> hex_digit_plus .
    (3) hex_digit_plus -> hex_digit_plus . hex_digit
    (1) hex_digit -> . DIGIT
    (2) hex_digit -> . LETTER

    $end            reduce using rule 5 (hex_scalar_value -> hex_digit_plus .)
    DIGIT           shift and go to state 5
    LETTER          shift and go to state 7

    hex_digit                      shift and go to state 8

state 4

    (4) hex_digit_plus -> hex_digit .

    DIGIT           reduce using rule 4 (hex_digit_plus -> hex_digit .)
    LETTER          reduce using rule 4 (hex_digit_plus -> hex_digit .)
    $end            reduce using rule 4 (hex_digit_plus -> hex_digit .)


state 5

    (1) hex_digit -> DIGIT .

    DIGIT           reduce using rule 1 (hex_digit -> DIGIT .)
    LETTER          reduce using rule 1 (hex_digit -> DIGIT .)
    $end            reduce using rule 1 (hex_digit -> DIGIT .)


state 6

    (6) inline_hex_escape -> HEX_ESCAPE hex_scalar_value .

    $end            reduce using rule 6 (inline_hex_escape -> HEX_ESCAPE hex_scalar_value .)


state 7

    (2) hex_digit -> LETTER .

    DIGIT           reduce using rule 2 (hex_digit -> LETTER .)
    LETTER          reduce using rule 2 (hex_digit -> LETTER .)
    $end            reduce using rule 2 (hex_digit -> LETTER .)


state 8

    (3) hex_digit_plus -> hex_digit_plus hex_digit .

    DIGIT           reduce using rule 3 (hex_digit_plus -> hex_digit_plus hex_digit .)
    LETTER          reduce using rule 3 (hex_digit_plus -> hex_digit_plus hex_digit .)
    $end            reduce using rule 3 (hex_digit_plus -> hex_digit_plus hex_digit .)

